<!doctype html>
<html lang="it" data-lang="it">
<head>
  <meta charset="utf-8" />
  <meta name="viewport"
        content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover">
  <title>Mangia & Fuggi â€“ Menu</title>

  <link rel="stylesheet" href="/styles.css" />

  <style>
    /* ==== Fix iPhone zoom e tap ==== */
    html, body {
      text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%;
    }
    * { touch-action: manipulation; }
    .btn, .lang-select, input, select { font-size: 16px; } /* evita zoom sui form iOS */

    /* ==== Stili generali ==== */
    .container{max-width:1100px;margin:0 auto;display:grid;grid-template-columns:1fr 340px;gap:18px}
    .card{background:#fff;border-radius:14px;padding:16px 18px;box-shadow:0 2px 10px rgba(0,0,0,.06)}
    h2{font-size:20px;margin:8px 0 12px;color:#7b4b3a}
    .note{font-size:12px;color:#666;margin-top:6px;line-height:1.4}
    .warn{color:#b42318}
    header{max-width:1100px;margin:0 auto 20px;display:flex;gap:12px;align-items:center}
    header img.logo{width:46px;height:46px;object-fit:cover;border-radius:8px;border:2px solid #7b4b3a22}
    .title{font-weight:700;font-size:28px;color:#7b4b3a}
    .header-right{margin-left:auto;display:flex;align-items:center;gap:8px}
    .lang-select{padding:6px 10px;border:1px solid #e6e2df;border-radius:8px;background:#fafafa;cursor:pointer}
    .btn-row{display:flex;flex-direction:column;gap:10px}
    .btn[disabled]{opacity:.5;cursor:not-allowed}
    @media (max-width:900px){.container{grid-template-columns:1fr}}

    /* â€”â€” Modal semplice per "Dividi & paga" â€”â€” */
    .modal-backdrop{
      position:fixed; inset:0; background:#0008; display:none;
      align-items:center; justify-content:center; z-index:50;
    }
    .modal{
      width:min(680px, 94vw); background:#fff; border-radius:14px;
      box-shadow:0 20px 60px rgba(0,0,0,.35); overflow:hidden;
    }
    .modal header{padding:14px 16px; border-bottom:1px solid #eee; margin:0; max-width:none}
    .modal .body{padding:16px}
    .close-x{margin-left:auto; font-size:22px; line-height:1; cursor:pointer}

    .tabs{display:flex; gap:8px; margin-bottom:12px}
    .tab{border:1px solid #e6e2df; background:#faf9f7; padding:8px 12px; border-radius:999px; cursor:pointer; font-weight:600}
    .tab.active{background:#7b4b3a; color:#fff; border-color:#7b4b3a}

    .row{display:flex; gap:8px; align-items:center; margin:6px 0}
    .row input[type="text"]{flex:1; padding:8px 10px; border:1px solid #e6e2df; border-radius:8px}
    .row input[type="number"]{width:130px; padding:8px 10px; border:1px solid #e6e2df; border-radius:8px}
    .pill{background:#f3f1ef; padding:6px 10px; border-radius:999px; font-weight:700}
    .split-actions{display:flex; gap:8px; flex-wrap:wrap; margin-top:10px}
    .muted{color:#777; font-size:13px}
    .err{color:#b42318; font-size:13px}

    .quota-list{display:flex; flex-direction:column; gap:8px; margin-top:6px}
    .quota-item{display:flex; gap:10px; align-items:center; justify-content:space-between;
      border:1px dashed #e6e2df; padding:10px; border-radius:10px}
  </style>
</head>
<body>
  <header>
    <img class="logo" src="/img/LOGO.JPG" alt="Logo" onerror="this.src='/img/fallback.jpg'">
    <div class="title">Mangia &amp; Fuggi</div>
    <div class="header-right">
      <label for="lang" class="muted" data-i18n="label_language">Lingua</label>
      <select id="lang" class="lang-select" aria-label="Language">
        <option value="it">Italiano</option>
        <option value="en">English</option>
      </select>
    </div>
  </header>

  <div class="container">
    <main>
      <!-- ANTIPASTI -->
      <section id="antipasti" class="card">
        <h2 data-i18n="sec_starters">Antipasti</h2>
        <!-- I prodotti restano come sono (IT) -->
        <%- include('partials/item', {name:'Bruschette',        desc:'Pomodoro, basilico, olio EVO', price:4.00, img:'/img/BRUSCHETTE.JPG.jpg'}) %>
        <%- include('partials/item', {name:'Olive & Taralli',    desc:'Selezione tipica pugliese',    price:3.50, img:'/img/TARALLINI E OLIVE.JPG'}) %>
        <%- include('partials/item', {name:'Caprese',            desc:'Mozzarella, pomodoro, origano',price:7.00, img:'/img/CAPRESE.JPG'}) %>
        <%- include('partials/item', {name:'Parmigiana',         desc:'Melanzane, pomodoro, grana',   price:7.50, img:'/img/PARMIGIANA.JPG'}) %>
        <%- include('partials/item', {name:'Fritto misto',       desc:'Arancini, crocchÃ¨, panelle',   price:8.00, img:'/img/FRITTINI.JPG'}) %>
      </section>

      <!-- PIZZE CLASSICHE -->
      <section id="classiche" class="card">
        <h2 data-i18n="sec_classic">Pizze classiche</h2>
        <%- include('partials/item', {name:'Margherita',         desc:'Pomodoro, mozzarella, basilico', price:5.00, img:'/img/MARGHERITA.JPG'}) %>
        <%- include('partials/item', {name:'Marinara',           desc:'Pomodoro, aglio, origano',       price:4.50, img:'/img/MARINARA.JPG'}) %>
        <%- include('partials/item', {name:'Diavola',            desc:'Salame piccante',                price:7.00, img:'/img/DIAVOLA.JPG'}) %>
        <%- include('partials/item', {name:'Prosciutto e funghi',desc:'Cotto e champignon',             price:7.50, img:'/img/COTTOEFUNGHI.JPG'}) %>
        <%- include('partials/item', {name:'Quattro formaggi',   desc:'Mozzarella, gorgonzola, grana, provola', price:8.00, img:'/img/4FORMAGGI.JPG'}) %>
      </section>

      <!-- PIZZE GOURMET -->
      <section id="gourmet" class="card">
        <h2 data-i18n="sec_gourmet">Pizze gourmet</h2>
        <%- include('partials/item', {name:'Bufalina',           desc:'Pomodoro, bufala DOP, basilico', price:9.00,  img:'/img/BURRATA.JPG'}) %>
        <%- include('partials/item', {name:'Tartufo',            desc:'Crema di tartufo, provola, speck',price:11.00, img:'/img/TARTUFO.JPG'}) %>
        <%- include('partials/item', {name:'Mortazza',           desc:'Pistacchio, stracciatella, mortadella', price:10.50, img:'/img/MORTAZZA.JPG'}) %>
        <%- include('partials/item', {name:'Nduja & Burrata',    desc:'â€™Nduja calabrese, burrata',       price:10.00, img:'/img/NDUJA E MORTADELLA.JPG'}) %>
      </section>

      <!-- BEVANDE -->
      <section id="bevande" class="card">
        <h2 data-i18n="sec_drinks">Bevande</h2>
        <%- include('partials/item', {name:'Acqua',              desc:'Naturale o frizzante', price:1.50, img:'/img/ACQUA.JPG'}) %>
        <%- include('partials/item', {name:'Coca-Cola',          desc:'Lattina 33cl',          price:2.50, img:'/img/COCACOLA.JPG'}) %>
        <%- include('partials/item', {name:'Birra',              desc:'Chiara alla spina',     price:4.00, img:'/img/BIRRA.JPG'}) %>
        <%- include('partials/item', {name:'Vino della casa',    desc:'Bicchiere',             price:3.50, img:'/img/VINO.JPG'}) %>
      </section>

      <!-- DESSERT -->
      <section id="dessert" class="card">
        <h2 data-i18n="sec_desserts">Dessert</h2>
        <%- include('partials/item', {name:'TiramisÃ¹',           desc:'Classico',            price:4.50, img:'/img/TIRAMISU.JPG'}) %>
        <%- include('partials/item', {name:'Panna cotta',        desc:'Frutti di bosco',     price:4.00, img:'/img/PANNACOTTA.JPG'}) %>
        <%- include('partials/item', {name:'Cheesecake',         desc:'Ricotta e pistacchio',price:4.50, img:'/img/CHEESECAKE.JPG'}) %>
      </section>
    </main>

    <aside class="card cart">
      <h3 data-i18n="cart_title">Carrello</h3>
      <ul id="cart"></ul>
      <div class="tot"><span data-i18n="cart_total">Totale</span><span id="total">â‚¬ 0,00</span></div>

      <div class="btn-row" style="margin-top:10px">
        <button id="btn-pay-online" class="btn" onclick="orderAndPayOnline()" disabled data-i18n="btn_pay_online">ðŸ’³ Ordina &amp; paga online</button>
        <button id="btn-pay-cashier" class="btn btn-ghost" onclick="orderPayAtCounter()" disabled data-i18n="btn_pay_counter">ðŸ’µ Ordina &amp; paga in cassa</button>
        <button id="btn-split" class="btn btn-ghost" onclick="openSplitModal()" disabled data-i18n="btn_split_pay">âž— Dividi &amp; paga</button>
      </div>
      <div id="pay-note" class="note"></div>
    </aside>
  </div>

  <!-- ===== Modal DIVIDI & PAGA ===== -->
  <div id="split-backdrop" class="modal-backdrop" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="modal">
      <header>
        <div class="title" style="font-size:20px;color:#7b4b3a;margin:0" data-i18n="split_title">Dividi &amp; paga</div>
        <div class="close-x" onclick="closeSplitModal()">Ã—</div>
      </header>
      <div class="body">
        <div class="muted" data-i18n="bill_total_prefix">Totale conto:</div>
        <span id="split-total" class="pill" style="margin-left:6px">â‚¬ 0,00</span>

        <div class="tabs" style="margin-top:8px">
          <button id="tab-equal" class="tab active" onclick="setSplitMode('equal')" data-i18n="tab_equal">Alla romana</button>
          <button id="tab-custom" class="tab" onclick="setSplitMode('custom')" data-i18n="tab_custom">Importi personalizzati</button>
        </div>

        <!-- Alla romana -->
        <div id="pane-equal">
          <div class="row">
            <label for="equal-n" data-i18n="label_people">Numero persone:</label>
            <input id="equal-n" type="number" min="2" value="2" oninput="renderEqual()" />
            <span class="muted" data-i18n="hint_auto_share">Quota per persona calcolata automaticamente.</span>
          </div>
          <div id="equal-quotas" class="quota-list"></div>
        </div>

        <!-- Personalizzato -->
        <div id="pane-custom" style="display:none">
          <div id="custom-rows"></div>
          <div class="split-actions">
            <button class="btn btn-ghost" type="button" onclick="addCustomRow()" data-i18n="btn_add_person">+ Aggiungi persona</button>
            <span class="muted" data-i18n="hint_sum_equal">La somma deve essere uguale al totale.</span>
          </div>
          <div id="custom-error" class="err" style="display:none"></div>
          <div id="custom-quotas" class="quota-list" style="margin-top:10px"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    /* ====== Mini i18n (IT predefinito, EN opzionale) ====== */
    const I18N = {
      it: {
        label_language: "Lingua",
        sec_starters: "Antipasti",
        sec_classic: "Pizze classiche",
        sec_gourmet: "Pizze gourmet",
        sec_drinks: "Bevande",
        sec_desserts: "Dessert",
        cart_title: "Carrello",
        cart_total: "Totale",
        btn_pay_online: "ðŸ’³ Ordina & paga online",
        btn_pay_counter: "ðŸ’µ Ordina & paga in cassa",
        btn_split_pay: "âž— Dividi & paga",
        split_title: "Dividi & paga",
        bill_total_prefix: "Totale conto:",
        tab_equal: "Alla romana",
        tab_custom: "Importi personalizzati",
        label_people: "Numero persone:",
        hint_auto_share: "Quota per persona calcolata automaticamente.",
        btn_add_person: "+ Aggiungi persona",
        hint_sum_equal: "La somma deve essere uguale al totale.",
        person_n: i => `Persona ${i}`,
        person_generic: "Persona",
        pay_share_n: i => `Paga quota #${i}`,
        placeholder_name: "Nome (opzionale)",
        placeholder_amount: "Importo es. 7.50",
        alert_add_item: "Aggiungi almeno un prodotto",
        err_send_order: "Errore invio ordine",
        pay_enabled_note: "Il pagamento online aprirÃ  SumUp con lâ€™importo del carrello.",
        pay_disabled_note: "Pagamento online disabilitato: verifica credenziali SumUp.",
        pay_not_available: "Pagamento online non disponibile.",
        order_sent_counter: "Ordine inviato! Presentati in cassa per il pagamento.",
        sum_must_equal: (sum, tot) => `La somma degli importi (${sum}) deve essere uguale al totale (${tot}).`
      },
      en: {
        label_language: "Language",
        sec_starters: "Starters",
        sec_classic: "Classic pizzas",
        sec_gourmet: "Gourmet pizzas",
        sec_drinks: "Drinks",
        sec_desserts: "Desserts",
        cart_title: "Cart",
        cart_total: "Total",
        btn_pay_online: "ðŸ’³ Order & pay online",
        btn_pay_counter: "ðŸ’µ Order & pay at counter",
        btn_split_pay: "âž— Split & pay",
        split_title: "Split & pay",
        bill_total_prefix: "Bill total:",
        tab_equal: "Split evenly",
        tab_custom: "Custom amounts",
        label_people: "Number of people:",
        hint_auto_share: "Per-person share calculated automatically.",
        btn_add_person: "+ Add person",
        hint_sum_equal: "The sum must equal the total.",
        person_n: i => `Person ${i}`,
        person_generic: "Person",
        pay_share_n: i => `Pay share #${i}`,
        placeholder_name: "Name (optional)",
        placeholder_amount: "Amount e.g. 7.50",
        alert_add_item: "Add at least one item",
        err_send_order: "Error sending order",
        pay_enabled_note: "Online payment will open SumUp with the cart amount.",
        pay_disabled_note: "Online payment disabled: check SumUp credentials.",
        pay_not_available: "Online payment not available.",
        order_sent_counter: "Order sent! Please pay at the counter.",
        sum_must_equal: (sum, tot) => `The sum of amounts (${sum}) must equal the total (${tot}).`
      }
    };

    // Dizionario prodotti/ingredienti (IT -> EN) senza toccare gli include
    const ITEM_I18N = {
      // â€” Antipasti
      "Bruschette":"Bruschetta",
      "Pomodoro, basilico, olio EVO":"Tomato, basil, extra-virgin olive oil",
      "Olive & Taralli":"Olives & Taralli",
      "Selezione tipica pugliese":"Typical Apulian selection",
      "Caprese":"Caprese",
      "Mozzarella, pomodoro, origano":"Mozzarella, tomato, oregano",
      "Parmigiana":"Eggplant Parmigiana",
      "Melanzane, pomodoro, grana":"Eggplant, tomato, Grana cheese",
      "Fritto misto":"Mixed fried starters",
      "Arancini, crocchÃ¨, panelle":"Rice balls, potato croquettes, chickpea fritters",

      // â€” Pizze classiche
      "Margherita":"Margherita",
      "Pomodoro, mozzarella, basilico":"Tomato, mozzarella, basil",
      "Marinara":"Marinara",
      "Pomodoro, aglio, origano":"Tomato, garlic, oregano",
      "Diavola":"Diavola",
      "Salame piccante":"Spicy salami",
      "Prosciutto e funghi":"Ham & mushrooms",
      "Cotto e champignon":"Cooked ham and mushrooms",
      "Quattro formaggi":"Four cheeses",
      "Mozzarella, gorgonzola, grana, provola":"Mozzarella, gorgonzola, Grana, provola",

      // â€” Pizze gourmet
      "Pizze gourmet":"Gourmet pizzas",
      "Bufalina":"Bufalina",
      "Pomodoro, bufala DOP, basilico":"Tomato, buffalo mozzarella PDO, basil",
      "Tartufo":"Truffle",
      "Crema di tartufo, provola, speck":"Truffle cream, provola, speck",
      "Mortazza":"Mortazza",
      "Pistacchio, stracciatella, mortadella":"Pistachio, stracciatella, mortadella",
      "Nduja & Burrata":"â€™Nduja & Burrata",
      "â€™Nduja calabrese, burrata":"Calabrian â€™nduja, burrata",

      // â€” Bevande
      "Bevande":"Drinks",
      "Acqua":"Water",
      "Naturale o frizzante":"Still or sparkling",
      "Coca-Cola":"Coca-Cola",
      "Lattina 33cl":"33cl can",
      "Birra":"Beer",
      "Chiara alla spina":"Light draft",
      "Vino della casa":"House wine",
      "Bicchiere":"Glass",

      // â€” Dessert
      "Dessert":"Desserts",
      "TiramisÃ¹":"Tiramisu",
      "Classico":"Classic",
      "Panna cotta":"Panna cotta",
      "Frutti di bosco":"Mixed berries",
      "Cheesecake":"Cheesecake",
      "Ricotta e pistacchio":"Ricotta & pistachio"
    };

    function getLang(){
      return localStorage.getItem("lang") || document.documentElement.dataset.lang || "it";
    }
    function setLang(lang){
      const newLang = (lang==="en") ? "en" : "it";
      localStorage.setItem("lang", newLang);
      document.documentElement.lang = newLang;
      document.documentElement.dataset.lang = newLang;
      applyI18n();
    }
    function t(key){
      const lang = getLang();
      return I18N[lang][key] ?? I18N.it[key] ?? key;
    }

    function translateItems(){
  const lang = getLang();

  // Nomi: prendiamo SEMPRE la chiave IT da data-i18n-name
  document.querySelectorAll('[data-i18n-name]').forEach(el=>{
    const key = el.getAttribute('data-i18n-name');
    el.textContent = (lang === 'en') ? (ITEM_I18N[key] || key) : key;
  });

  // Descrizioni: aggiorniamo SOLO l'<em> con data-i18n-desc
  // (non tocchiamo il contenitore .i-desc, cosÃ¬ l'input note resta cliccabile)
  document.querySelectorAll('em[data-i18n-desc]').forEach(em=>{
    const key = em.getAttribute('data-i18n-desc');
    em.textContent = (lang === 'en') ? (ITEM_I18N[key] || key) : key;
  });
}

    function applyI18n(){
      // elementi con data-i18n (testo semplice)
      document.querySelectorAll("[data-i18n]").forEach(el=>{
        const k = el.getAttribute("data-i18n");
        const val = t(k);
        if(typeof val === "string") el.textContent = val;
      });
      translateItems(); // <â€” traduce nomi e descrizioni prodotti senza toccare il markup
      // placeholder input nel pannello custom
      document.querySelectorAll('#custom-rows input[type="text"]').forEach(i=>i.placeholder = t("placeholder_name"));
      document.querySelectorAll('#custom-rows input[type="number"]').forEach(i=>i.placeholder = t("placeholder_amount"));
      // nota pagamento
      renderPayNote();
      // ri-render pannelli split per aggiornare testi dinamici
      if (document.getElementById('split-backdrop').style.display === 'flex'){
        (splitMode==='equal') ? renderEqual() : renderCustom();
      }
    }

    // imposta selettore lingua
    (function initLang(){
      const sel = document.getElementById("lang");
      sel.value = getLang();
      sel.addEventListener("change", e=>setLang(e.target.value));
      applyI18n();
    })();
  </script>

  <script>
    // ======= Stato carrello / pagamenti =======
  // ======= Stato carrello / pagamenti (CON NOTE) =======
  const cart = new Map();         // mappa: name -> { price, qty, note? }
  let PAY_ENABLED = false;

  (async () => {
    try{
      const r = await fetch("/api/pay-config");
      const j = await r.json();
      PAY_ENABLED = !!(j && j.enabled);
    }catch{}
    renderPayNote();
    updateButtons();
  })();

  function renderPayNote(){
    const el = document.getElementById("pay-note");
    if(!el) return;
    el.innerHTML = PAY_ENABLED
      ? t("pay_enabled_note")
      : `<span class="warn">${t("pay_disabled_note")}</span>`;
  }

  // Utils
  function cssId(s){
    return String(s).toLowerCase().replace(/[^a-z0-9]+/gi,'_');
  }
  function euro(n){
    return "â‚¬ " + Number(n).toFixed(2).replace(".", ",");
  }
  function cartTotal(){
    return Array.from(cart.values()).reduce((s, i) => s + i.qty * i.price, 0);
  }

  // Sanitize nota utente (no HTML, max 120 char)
  function cleanNote(v){
    return String(v || "")
      .replace(/[<>]/g, "")        // niente tag
      .replace(/\s+/g, " ")        // spazi multipli -> 1 spazio
      .trim()
      .slice(0, 120);
  }

  // Salva/aggiorna la nota per un prodotto
  function setNote(name, value){
    const key = String(name);
    const it = cart.get(key) || { price: 0, qty: 0, note: "" };
    it.note = cleanNote(value);
    cart.set(key, it);
    renderCart();
  }

  // === PATCH VISUAL Q.TÃ€ (mostra sempre il numerino accanto ai bottoni) ===
  function updateInlineQtyDisplay(btnEl, qty){
    if(!btnEl) return;
    let span = btnEl.previousElementSibling;
    if(!(span instanceof HTMLElement) || span.tagName!=="SPAN"){
      span = btnEl.nextElementSibling;
    }
    if(!(span instanceof HTMLElement) || span.tagName!=="SPAN"){
      span = btnEl.parentElement?.querySelector('.qty, .q, [data-qty]');
    }
    if(span) span.textContent = qty;
  }

  // Q.tÃ  (aggiornate per gestire anche il prezzo su item giÃ  esistenti con nota)
  function inc(name, price){
    const key = String(name);
    const it = cart.get(key) || { price, qty: 0, note: "" };
    it.qty++;
    // se per qualche motivo l'item esisteva con price=0 (es. nota scritta prima), imposta il prezzo ora
    if(!it.price && price) it.price = Number(price) || 0;
    cart.set(key, it);

    const qEl = document.getElementById('q-'+cssId(name));
    if(qEl) qEl.textContent = it.qty;

    const btn = window.event?.target?.closest('button');
    updateInlineQtyDisplay(btn, it.qty);

    renderCart();
  }

  function dec(name){
    const key = String(name);
    const it = cart.get(key) || { qty: 0, price: 0, note: "" };
    it.qty = Math.max(0, it.qty - 1);
    if(it.qty === 0) cart.delete(key); else cart.set(key, it);

    const qEl = document.getElementById('q-'+cssId(name));
    if(qEl) qEl.textContent = it.qty || 0;

    const btn = window.event?.target?.closest('button');
    updateInlineQtyDisplay(btn, it.qty || 0);

    renderCart();
  }

  // Render carrello (mostra la nota sotto al nome se presente)
  function renderCart(){
    const ul = document.getElementById('cart'); if(!ul) return;
    ul.innerHTML = "";
    let tot = 0;
    for(const [n,it] of cart.entries()){
      if(!it.qty) continue;
      tot += it.qty * it.price;
      const li = document.createElement('li');

      const noteHtml = it.note ? `<div class="muted" style="font-size:12px;margin-top:2px">â€¢ Nota: <em>${it.note}</em></div>` : "";
      li.innerHTML = `
        <div>
          <strong>${it.qty} Ã— ${n}</strong>
          ${noteHtml}
        </div>
        <div>${euro(it.qty*it.price)}</div>
      `;
      li.style.display = "flex";
      li.style.alignItems = "flex-start";
      li.style.justifyContent = "space-between";
      li.style.gap = "8px";
      ul.appendChild(li);
    }
    const totEl = document.getElementById('total');
    if(totEl) totEl.textContent = euro(tot);
    updateButtons();
  }
// â€”â€” RESET delle quantitÃ  nel menu + pulizia note
function resetMenuQuantities(){
  // azzera i numeri tra i bottoni
  document.querySelectorAll('.i-qty .qv').forEach(s => { s.textContent = '0'; });
  // svuota eventuali note scritte negli item (i campi piccoli tra parentesi)
  document.querySelectorAll('.note-inline').forEach(i => { i.value = ''; });
}

  function updateButtons(){
    const hasItems = cart.size > 0 && cartTotal() > 0;
    const btnCash = document.getElementById('btn-pay-cashier');
    const btnOnline = document.getElementById('btn-pay-online');
    const btnSplit = document.getElementById('btn-split');
    if(btnCash) btnCash.disabled = !hasItems;
    if(btnOnline) btnOnline.disabled = !(hasItems && PAY_ENABLED);
    if(btnSplit) btnSplit.disabled = !(hasItems && PAY_ENABLED);
  }

  // â€”â€” Core: salva ordine e ritorna order_id
  async function createOrder(){
    // Appendiamo la nota al nome, cosÃ¬ il server non deve cambiare schema
    const items = Array.from(cart.entries())
      .filter(([_,it]) => it.qty > 0)
      .map(([n,it])=>({
        name: it.note ? `${n} â€” Note: ${it.note}` : n,
        price: it.price,
        qty: it.qty
      }));

    if(items.length===0){ alert(t("alert_add_item")); return null; }

    const total = items.reduce((s,i)=>s+i.price*i.qty,0);
    const r = await fetch("/api/checkout",{
      method:"POST",
      headers:{"Content-Type":"application/json"},
      body:JSON.stringify({ tableCode:null, items, total })
    });
    const js = await r.json();
    if(!js.ok){ alert(t("err_send_order")); return null; }
    return { order_id: js.order_id, total };
  }

  // ðŸ’³ Ordina & paga online (intero)
  async function orderAndPayOnline(){
    if(!PAY_ENABLED){ alert(t("pay_not_available")); return; }
    const saved = await createOrder();
    if(!saved) return;

    const ok = await payAmount(saved.total, `Mangia & Fuggi - Ordine #${saved.order_id}`);
   if(ok){
  cart.clear();
  renderCart();
  resetMenuQuantities(); // <â€” aggiunta
}
  }

  // ðŸ’µ Ordina & paga in cassa
  async function orderPayAtCounter(){
    const saved = await createOrder();
    if(!saved) return;
    alert(t("order_sent_counter"));
cart.clear(); renderCart();
  }

  // ======= DIVIDI & PAGA =======
  let splitMode = 'equal'; // 'equal' | 'custom'
  function openSplitModal(){
    document.getElementById('split-total').textContent = euro(cartTotal());
    document.getElementById('split-backdrop').style.display = 'flex';
    renderEqual();
    resetCustom();
    applyI18n();
  }
  function closeSplitModal(){ document.getElementById('split-backdrop').style.display='none'; }

  function setSplitMode(mode){
    splitMode = mode;
    document.getElementById('tab-equal').classList.toggle('active', mode==='equal');
    document.getElementById('tab-custom').classList.toggle('active', mode==='custom');
    document.getElementById('pane-equal').style.display = (mode==='equal')?'block':'none';
    document.getElementById('pane-custom').style.display = (mode==='custom')?'block':'none';
    (mode==='equal') ? renderEqual() : renderCustom();
  }

  // Alla romana
  function renderEqual(){
    const n = Math.max(2, Number(document.getElementById('equal-n').value || 2));
    const tot = cartTotal();
    const quota = Math.round((tot/n)*100)/100;
    const list = document.getElementById('equal-quotas'); list.innerHTML = "";
    for(let i=1;i<=n;i++){
      const div = document.createElement('div');
      div.className = "quota-item";
      div.innerHTML = `
        <div><strong>${t("person_n")(i)}</strong> â€” <span class="muted">${t("cart_total")}</span>:
             <span class="pill">${euro(quota)}</span></div>
        <button class="btn" type="button" onclick="payQuota(${quota.toFixed(2)})">${t("pay_share_n")(i)}</button>
      `;
      list.appendChild(div);
    }
  }

  // Personalizzato
  function resetCustom(){
    document.getElementById('custom-rows').innerHTML = "";
    document.getElementById('custom-quotas').innerHTML = "";
    document.getElementById('custom-error').style.display = "none";
    for(let i=1;i<=2;i++) addCustomRow();
    document.querySelectorAll('#custom-rows input[type="text"]').forEach(i=>i.placeholder = t("placeholder_name"));
    document.querySelectorAll('#custom-rows input[type="number"]').forEach(i=>i.placeholder = t("placeholder_amount"));
  }
  function addCustomRow(){
    const wrap = document.getElementById('custom-rows');
    const idx = wrap.children.length+1;
    const row = document.createElement('div');
    row.className="row";
    row.innerHTML = `
      <input type="text" placeholder="${t("placeholder_name")}" value="${t("person_n")(idx)}">
      <input type="number" step="0.01" min="0" placeholder="${t("placeholder_amount")}" oninput="renderCustom()">
    `;
    wrap.appendChild(row);
    renderCustom();
  }
  function renderCustom(){
    const rows = [...document.querySelectorAll('#custom-rows .row')];
    const quotas = [];
    for(const r of rows){
      const name = r.querySelector('input[type="text"]').value.trim() || t('person_generic');
      const val = Number(r.querySelector('input[type="number"]').value || 0);
      if(val>0) quotas.push({name, amount: Math.round(val*100)/100});
    }
    const sum = quotas.reduce((s,q)=>s+q.amount,0);
    const tot = Math.round(cartTotal()*100)/100;

    const err = document.getElementById('custom-error');
    if(sum !== tot){
      err.style.display = "block";
      err.textContent = t("sum_must_equal")(euro(sum), euro(tot));
    } else {
      err.style.display = "none";
    }

    const list = document.getElementById('custom-quotas'); list.innerHTML="";
    quotas.forEach((q, i)=>{
      const div = document.createElement('div');
      div.className = "quota-item";
      div.innerHTML = `
        <div><strong>${q.name}</strong> â€” <span class="muted">${t("cart_total")}</span>:
             <span class="pill">${euro(q.amount)}</span></div>
        <button class="btn" type="button" ${sum!==tot?'disabled':''}
                onclick="payQuota(${q.amount.toFixed(2)})">${t("pay_share_n")(i+1)}</button>
      `;
      list.appendChild(div);
    });
  }

  // â€” Esegue un pagamento SumUp per un importo specifico
  async function payQuota(amount){
    if(!PAY_ENABLED){ alert(t("pay_not_available")); return; }
    const saved = await createOrder(); // un ordine backend; quota pagata separatamente
    if(!saved) return;
    await payAmount(Number(amount), `Mangia & Fuggi - Quota ordine #${saved.order_id}`);
  }

  // â€” Chiamata generica a /api/pay-sumup (con diagnostica e redirect diretto)
  async function payAmount(amount, description){
    try{
      const r = await fetch("/api/pay-sumup", {
        method:"POST",
        headers:{"Content-Type":"application/json"},
        body: JSON.stringify({
          amount: Number(amount.toFixed(2)),
          currency:"EUR",
          description
        })
      });

      const text = await r.text();
      let js; try { js = JSON.parse(text); } catch { js = { ok:false, raw:text }; }

      if (r.ok && js.ok && js.url){
        location.href = js.url; // redirect diretto
        return true;
      }

      const msg = js?.error || js?.data?.message || js?.raw || `HTTP ${r.status}`;
      alert(t("pay_not_available") + "\nDettagli: " + msg);
      console.error("pay-sumup error:", {status:r.status, js});
      return false;
    }catch(err){
      alert(t("pay_not_available") + "\nNetwork error.");
      console.error(err);
      return false;
    }
  }
</script>
</body>
</html>