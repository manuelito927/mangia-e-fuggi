<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mangia & Fuggi • Dashboard Ordini</title>

  <!-- Supabase + Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

  <!-- Font -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">

  <style>
    :root{
      --bg:#f6efe9; --paper:#ffffff; --ink:#2b2b2b; --muted:#6e6e6e;
      --brand:#7b4b3a; --brand-2:#a8644f; --stroke:#ead8cf; --shadow:0 12px 30px rgba(0,0,0,.06);
      --ok:#1f9d6b; --warn:#d97706; --chip:#f3e7e2;
    }
    *{box-sizing:border-box}
    html,body{margin:0;background:var(--bg);color:var(--ink);font-family:Poppins,system-ui,-apple-system,Segoe UI,Roboto}
    a{color:inherit}
    /* Topbar */
    .topbar{position:sticky;top:0;z-index:20;background:linear-gradient(180deg,#fff,rgba(255,255,255,.85) 70%,transparent);backdrop-filter:blur(6px);border-bottom:1px solid #eee}
    .topin{max-width:1240px;margin:0 auto;display:flex;gap:12px;align-items:center;padding:14px 18px}
    .brand{font-weight:700;color:var(--brand);font-size:20px;white-space:nowrap}
    .sp{flex:1}
    .search{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .search input[type="search"]{min-width:220px;border:1px solid var(--stroke);border-radius:12px;padding:10px 12px;background:#fff}
    .btn{border:0;border-radius:12px;padding:10px 14px;font-weight:600;cursor:pointer}
    .btn.primary{background:var(--brand);color:#fff}
    .btn.ghost{background:#eee;color:#333}
    .pill{background:var(--chip);color:var(--brand);font-weight:700;border-radius:999px;padding:6px 10px}
    .dot{width:10px;height:10px;border-radius:999px;background:#bbb}
    .dot.live{background:#21c997;box-shadow:0 0 0 6px rgba(33,201,151,.18)}

    /* Layout */
    .wrap{max-width:1240px;margin:18px auto;padding:0 18px;display:grid;grid-template-columns:1fr 380px;gap:18px}
    @media (max-width:1060px){ .wrap{grid-template-columns:1fr} }

    /* Cards */
    .card{background:var(--paper);border:1px solid var(--stroke);border-radius:18px;box-shadow:var(--shadow)}
    .card h2{margin:0;padding:16px 18px;color:var(--brand);font-size:18px}
    .section{padding:12px 16px}
    .grid-3{display:grid;grid-template-columns:repeat(3,1fr);gap:12px}
    @media (max-width:700px){ .grid-3{grid-template-columns:1fr} }

    .kpi{background:#fff;border:1px solid #f0e2da;border-radius:14px;padding:12px 14px}
    .kpi small{display:block;color:var(--muted)}
    .kpi b{display:block;font-size:22px;margin-top:4px}

    /* Orders list */
    .order{background:#fff;border:1px solid #f0e2da;border-radius:16px;padding:12px 14px;margin:12px 8px}
    .o-head{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .id{font:12px ui-monospace,Consolas;color:#777}
    .muted{color:var(--muted);font-size:13px}
    .badge{margin-left:auto;background:var(--chip);color:var(--brand);border-radius:999px;padding:6px 12px;font-weight:700}
    .rows{margin-top:8px;border-top:1px dashed var(--stroke);padding-top:8px}
    .row{display:grid;grid-template-columns:1fr auto;gap:10px;padding:4px 0}
    .right{text-align:right}
    .actions{display:flex;gap:8px;justify-content:flex-end;margin-top:8px}

    /* Tables */
    .tbl table{width:100%;border-collapse:collapse;font-size:13px}
    .tbl th,.tbl td{border-bottom:1px solid #f0e2da;padding:8px 6px;text-align:left}
    .tbl th{color:#7b4b3a}

    /* Filters bar (date + presets) */
    .filters{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .filters input[type="date"]{border:1px solid var(--stroke);border-radius:12px;padding:8px 10px;background:#fff}
    .chip{border:1px solid var(--stroke);border-radius:999px;padding:8px 10px;background:#fff;cursor:pointer}
    .chip.active{background:var(--brand);color:#fff;border-color:var(--brand)}
  </style>
</head>
<body>

  <!-- TOPBAR -->
  <div class="topbar">
    <div class="topin">
      <div class="brand">Mangia &amp; Fuggi — Dashboard ordini</div>
      <span id="liveDot" class="dot" title="Realtime"></span>
      <div class="sp"></div>

      <div class="search">
        <input id="search" type="search" placeholder="Cerca tavolo o piatto…" />
        <button id="btnRefresh" class="btn ghost">Aggiorna</button>
      </div>
    </div>
  </div>

  <!-- CONTENT -->
  <div class="wrap">

    <!-- COLONNA SINISTRA: ORDINI -->
    <section class="card">
      <h2>Ordini</h2>

      <div class="section filters" style="border-bottom:1px solid #f0e2da;">
        <label for="day"><b>Giorno:</b></label>
        <input id="day" type="date">
        <div class="chip" data-preset="today">Oggi</div>
        <div class="chip" data-preset="yesterday">Ieri</div>
        <div class="chip" data-preset="last7">Ultimi 7 giorni</div>
        <div class="sp"></div>
        <label><input type="checkbox" id="sound"> Suono nuovi ordini</label>
      </div>

      <div class="section grid-3" id="kpis">
        <div class="kpi"><small>Ordini</small><b id="k-count">0</b></div>
        <div class="kpi"><small>Fatturato</small><b id="k-revenue">€ 0,00</b></div>
        <div class="kpi"><small>Scontrino medio</small><b id="k-average">€ 0,00</b></div>
      </div>

      <div id="ordersRoot" class="section"></div>
    </section>

    <!-- COLONNA DESTRA: STATISTICHE -->
    <aside class="card">
      <h2>Statistiche</h2>

      <div class="section">
        <canvas id="chartHour" height="180"></canvas>
      </div>

      <div class="section tbl">
        <h3 style="margin:0 0 6px 0; color:#7b4b3a">Top 10 prodotti</h3>
        <div id="topTable"></div>
      </div>
    </aside>

  </div>

  <script>
    // ========= SETUP =========
    const supabase = window.supabase.createClient("<%= SUPABASE_URL %>", "<%= SUPABASE_KEY %>");
    const euro = n => "€ " + Number(n||0).toFixed(2).replace(".", ",");
    const fmt  = d => new Date(d).toLocaleString();
    const todayISO = () => new Date().toISOString().slice(0,10);

    let CURRENT = { orders: [], items: [], start: null, end: null, preset: "today" };
    let chartHour;

    // ========= UI WIRING =========
    const $ = sel => document.querySelector(sel);
    const ordersRoot = $("#ordersRoot");

    $("#btnRefresh").addEventListener("click", () => loadRange());
    $("#search").addEventListener("input", () => renderOrders());

    // Preset chips
    document.querySelectorAll(".chip").forEach(chip => {
      chip.addEventListener("click", () => {
        document.querySelectorAll(".chip").forEach(c => c.classList.remove("active"));
        chip.classList.add("active");
        CURRENT.preset = chip.dataset.preset;
        if (CURRENT.preset === "today") {
          $("#day").value = todayISO();
          loadRange();
        } else if (CURRENT.preset === "yesterday") {
          const d = new Date(); d.setDate(d.getDate()-1);
          $("#day").value = d.toISOString().slice(0,10);
          loadRange();
        } else if (CURRENT.preset === "last7") {
          // last7: ignora day e prende range 7 giorni (fino ad oggi)
          $("#day").value = todayISO();
          loadRange({ last7: true });
        }
      });
    });

    // Day picker
    $("#day").addEventListener("change", () => {
      CURRENT.preset = "custom";
      document.querySelectorAll(".chip").forEach(c => c.classList.remove("active"));
      loadRange();
    });

    // ========= LOAD DATA =========
    async function loadRange(opts={}){
      const selectedDay = $("#day").value || todayISO();
      let start, end;

      if (opts.last7) {
        end = new Date(); end.setHours(23,59,59,999);
        start = new Date(end); start.setDate(start.getDate()-6); start.setHours(0,0,0,0);
      } else {
        start = new Date(selectedDay+"T00:00:00");
        end   = new Date(selectedDay+"T23:59:59.999");
      }

      CURRENT.start = start; CURRENT.end = end;

      // 1) carico ordini nel range
      let q = supabase
        .from("orders")
        .select("id, table_code, total, created_at, order_items(name, qty, price)")
        .gte("created_at", start.toISOString())
        .lte("created_at", end.toISOString())
        .order("created_at",{ ascending:false });

      const { data: orders, error } = await q;
      if (error) { console.error(error); return; }

      // prepara items aggregati
      const items = [];
      for (const o of (orders||[])) {
        for (const it of (o.order_items||[])) items.push({ ...it, order_id: o.id, created_at: o.created_at });
      }
      CURRENT.orders = orders || [];
      CURRENT.items  = items;

      renderKPI();
      renderOrders();
      renderCharts();

      // realtime solo se range = oggi (preset today + day = oggi e non last7)
      attachRealtime(CURRENT.preset === "today" && $("#day").value === todayISO() && !opts.last7);
    }

    // ========= RENDER =========
    function renderKPI(){
      const orders = CURRENT.orders;
      const count = orders.length;
      const revenue = orders.reduce((s,o)=>s+Number(o.total||0),0);
      const avg = count ? (revenue/count) : 0;

      $("#k-count").textContent   = count;
      $("#k-revenue").textContent = euro(revenue);
      $("#k-average").textContent = euro(avg);
    }

    function renderOrders(){
      const q = ($("#search").value || "").toLowerCase();

      let list = CURRENT.orders;
      if (q) {
        list = list.filter(o => {
          const text = (o.table_code||"-")+" "+(o.order_items||[]).map(i=>i.name).join(" ");
          return text.toLowerCase().includes(q);
        });
      }

      ordersRoot.innerHTML = "";
      if (!list.length){
        ordersRoot.innerHTML = '<div class="muted">Nessun ordine per questo filtro.</div>';
        return;
      }

      list.forEach(o => {
        const el = document.createElement("div");
        el.className = "order";
        el.innerHTML = `
          <div class="o-head">
            <div>
              <div class="id">ID: ${o.id}</div>
              <div class="muted">Tavolo: <b>${o.table_code || "-"}</b></div>
              <div class="muted">Data: ${fmt(o.created_at)}</div>
            </div>
            <div class="badge">Totale: ${euro(o.total)}</div>
          </div>
          <div class="rows">
            ${(o.order_items||[]).map(it => `
              <div class="row">
                <div><b>${it.qty}×</b> ${it.name} <small>(${euro(it.price)})</small></div>
                <div class="right"><b>${euro(it.qty*it.price)}</b></div>
              </div>
            `).join("")}
          </div>
          <div class="actions">
            <button class="btn primary" onclick="window.print()">🖨️ Stampa</button>
          </div>
        `;
        ordersRoot.appendChild(el);
      });
    }

    function renderCharts(){
      // ---- vendite per ora ----
      const perHourMap = new Map();
      for (const o of CURRENT.orders){
        const t = new Date(o.created_at);
        t.setMinutes(0,0,0);
        const key = t.toISOString();
        const cur = perHourMap.get(key) || { hour: key, orders:0, revenue:0 };
        cur.orders += 1;
        cur.revenue += Number(o.total||0);
        perHourMap.set(key, cur);
      }
      const perHour = Array.from(perHourMap.values()).sort((a,b)=>a.hour.localeCompare(b.hour));
      const labelsH = perHour.map(x => new Date(x.hour).toLocaleTimeString([], {hour:"2-digit"}));
      const dataH = perHour.map(x => x.revenue);

      if (chartHour) chartHour.destroy();
      const ctx = document.getElementById("chartHour");
      chartHour = new Chart(ctx, {
        type: "bar",
        data: { labels: labelsH, datasets: [{ label: "Incasso (€/ora)", data: dataH }] },
        options: {
          responsive: true,
          plugins: { legend: { display: false } },
          scales: { y: { ticks: { callback: v => "€ " + v } } }
        }
      });

      // ---- top 10 prodotti (tabella con % e fatturato) ----
      const prodMap = new Map();
      let totQty = 0, totRev = 0;
      for (const it of CURRENT.items){
        const cur = prodMap.get(it.name) || { name: it.name, qty:0, revenue:0 };
        cur.qty += Number(it.qty||0);
        cur.revenue += Number(it.qty||0)*Number(it.price||0);
        prodMap.set(it.name, cur);
        totQty += Number(it.qty||0);
        totRev += Number(it.qty||0)*Number(it.price||0);
      }
      const top = Array.from(prodMap.values()).sort((a,b)=>b.qty-a.qty).slice(0,10);
      const rows = top.map(p => {
        const pQty = totQty ? ((p.qty/totQty)*100) : 0;
        const pRev = totRev ? ((p.revenue/totRev)*100) : 0;
        return `<tr>
          <td>${p.name}</td>
          <td class="right">${p.qty}</td>
          <td class="right">${euro(p.revenue)}</td>
          <td class="right">${pQty.toFixed(1)}%</td>
          <td class="right">${pRev.toFixed(1)}%</td>
        </tr>`;
      }).join("") || `<tr><td colspan="5" class="right">Nessun dato</td></tr>`;

      $("#topTable").innerHTML = `
        <table>
          <thead>
            <tr><th>Prodotto</th><th class="right">Qtà</th><th class="right">Fatturato</th><th class="right">% Qtà</th><th class="right">% Fatt.</th></tr>
          </thead>
          <tbody>${rows}</tbody>
        </table>`;
    }

    // ========= REALTIME =========
    const liveDot = $("#liveDot");
    function setLive(v){ liveDot.classList.toggle("live", !!v); }
    function attachRealtime(enable){
      if (!enable){ setLive(false); return; }
      setLive(true);
      supabase.channel("rt:orders")
        .on("postgres_changes",{ event:"*", schema:"public", table:"orders" }, () => {
          if ($("#sound").checked) beep();
          loadRange(); // ricarico il range attuale
        })
        .subscribe();
      supabase.channel("rt:order_items")
        .on("postgres_changes",{ event:"*", schema:"public", table:"order_items" }, () => loadRange())
        .subscribe();
    }

    // ========= BEEP =========
    function beep(){
      try{
        const ctx = new (window.AudioContext||window.webkitAudioContext)();
        const o = ctx.createOscillator(), g = ctx.createGain();
        o.frequency.value = 900; o.type="triangle";
        o.connect(g); g.connect(ctx.destination);
        g.gain.setValueAtTime(.001, ctx.currentTime);
        g.gain.exponentialRampToValueAtTime(.2, ctx.currentTime+.01);
        o.start(); o.stop(ctx.currentTime+.14);
      }catch(e){}
    }

    // ========= BOOT =========
    (function boot(){
      // default: OGGI
      $("#day").value = todayISO();
      document.querySelector('.chip[data-preset="today"]').classList.add("active");
      loadRange();
    })();
  </script>
</body>
</html>