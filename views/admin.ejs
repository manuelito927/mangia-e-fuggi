<!DOCTYPE html>
<html lang="it">
<head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Mangia & Fuggi — Dashboard</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet"/>
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<style>
:root{--bg:#f6efe7;--panel:#fff;--ink:#2c2623;--muted:#7b6d66;--brand:#7a4a3b;--ring:#ead8cf;--ok:#1f8f4e;--warn:#b42318}
*{box-sizing:border-box}
body{margin:0;background:var(--bg);color:var(--ink);font-family:Inter,system-ui}
.wrap{max-width:1200px;margin:0 auto;padding:16px}
h1{margin:0 0 10px;font-weight:800;letter-spacing:.3px}
.layout{display:grid;grid-template-columns:230px 1fr;gap:16px}
@media (max-width:900px){.layout{grid-template-columns:1fr}}
.side{background:var(--panel);border:1px solid var(--ring);border-radius:16px;padding:14px;height:fit-content;position:sticky;top:12px}
.nav .item{display:block;padding:10px 12px;border:1px solid #eee;border-radius:10px;margin-bottom:8px;color:inherit;text-decoration:none}
.nav .item.active{background:var(--brand);color:#fff;border-color:var(--brand)}
.card{background:var(--panel);border:1px solid var(--ring);border-radius:16px;padding:14px;margin-bottom:16px}
.row{display:flex;gap:10px;justify-content:space-between;align-items:center}
.muted{color:var(--muted)}
.pill{background:#f3e7e2;color:var(--brand);border-radius:999px;padding:6px 10px;font-weight:700}
.pill.ok{background:#e8f6ee;color:var(--ok)}
.pill.warn{background:#fff5dc;color:#a36200}
.pill.bad{background:#fdeaea;color:#b42318}
.btn{border:1px solid var(--ring);background:#fff;padding:8px 12px;border-radius:10px;cursor:pointer}
.btn.brand{background:var(--brand);border-color:var(--brand);color:#fff}
.btn.ok{background:#e8f6ee;border-color:#cde8d5;color:var(--ok)}
.btn.danger{background:#fdeaea;border-color:#f3caca;color:var(--warn)}
.input{border:1px solid var(--ring);border-radius:10px;padding:8px 10px;background:#fff}
.order{border:1px solid var(--ring);border-radius:14px;padding:12px;margin-bottom:12px;background:#fff}
.order .head{display:flex;gap:10px;justify-content:space-between;align-items:center;margin-bottom:8px}
.order .rows{margin-top:6px;border-top:1px dashed var(--ring);padding-top:6px}
.grid2{display:grid;grid-template-columns:1fr 1fr;gap:16px}
@media (max-width:900px){.grid2{grid-template-columns:1fr}}
.tbl table{width:100%;border-collapse:collapse;font-size:14px}
.tbl th,.tbl td{padding:8px;border-bottom:1px solid #eee;text-align:left}
.badge{display:inline-flex;align-items:center;gap:6px}
.bell{font-size:18px; cursor:pointer}
.bell.new{color:#d97706}
.clearx{margin-left:6px; cursor:pointer; color:#555}
.kg{display:flex;gap:8px;flex-wrap:wrap}
.kg .k{background:#fff;border:1px solid var(--ring);padding:8px 10px;border-radius:10px}
.tab.active{background:#f1d9d1}
</style>
</head>
<body>
<div class="wrap">
  <h1>Mangia & Fuggi — Dashboard</h1>
  <div class="layout">
    <!-- Sidebar -->
    <aside class="side">
      <div class="nav">
        <a href="#" class="item active" data-section="orders">📋 Ordini</a>
        <a href="#" class="item" data-section="stats">📊 Statistiche</a>
        <a href="#" class="item" data-section="tables">🪑 Tavoli</a>
      </div>
      <div class="card">
        <label style="display:flex;gap:8px;align-items:center;margin-bottom:8px">
          <input type="checkbox" id="chk-sound"/> Suono nuovi ordini
        </label>
        <label style="display:flex;gap:8px;align-items:center">
          <input type="checkbox" id="chk-autorefresh"/> Auto-aggiorna
        </label>
      </div>
    </aside>

    <!-- Main -->
    <main>
      <!-- ORDERS -->
      <section id="sec-orders" class="card">
        <div class="row" style="flex-wrap:wrap">
          <div class="kg">
            <span class="muted">Vista:</span>
            <button class="btn tab active" data-status="all">Tutti gli ordini <span id="c-all" class="pill" style="padding:2px 8px"></span></button>
            <button class="btn tab" data-status="due">Da incassare <span id="c-due" class="pill" style="padding:2px 8px"></span></button>
            <button class="btn tab" data-status="paid">Pagamenti accettati <span id="c-paid" class="pill" style="padding:2px 8px"></span></button>
            <button class="btn tab" data-status="canceled">Eliminati <span id="c-canc" class="pill" style="padding:2px 8px"></span></button>
          </div>
          <!-- 🆕 Barra strumenti con filtro giorno -->
          <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap">
            <input id="q" class="input" placeholder="Cerca tavolo o piatto…" />
            <span id="clearQ" class="clearx">Elimina</span>

            <!-- 🆕 Filtro per giorno ordini (default: oggi) -->
            <label class="muted" for="dayOrders">Giorno ordini:</label>
            <input id="dayOrders" type="date" class="input" />

            <button id="btn-refresh" class="btn brand">Aggiorna</button>
          </div>
        </div>
        <div id="orders"></div>
      </section>

      <!-- STATS -->
      <section id="sec-stats" class="card" style="display:none">
        <div class="grid2">
          <div class="card">
            <h3 style="margin:0 0 8px 0">Giorno</h3>
            <div class="row" style="gap:8px">
              <input id="day" type="date" class="input" />
              <button id="btn-day" class="btn brand">Aggiorna</button>
            </div>
            <div id="kpis" class="kg" style="margin-top:10px">
              <div class="k">Ordini: <b id="k-count">0</b></div>
              <div class="k">Incasso: <b id="k-rev">€ 0,00</b></div>
              <div class="k">Scontrino medio: <b id="k-avg">€ 0,00</b></div>
            </div>
            <div class="card" style="margin-top:12px">
              <canvas id="chartHour" height="160"></canvas>
            </div>
          </div>
          <div class="card">
            <h3 style="margin:0 0 8px 0">Intervallo</h3>
            <div class="row" style="gap:8px">
              <input id="from" type="date" class="input" />
              <input id="to"   type="date" class="input" />
              <button id="btn-range" class="btn brand">Aggiorna</button>
            </div>
            <div class="card" style="margin-top:12px">
              <canvas id="chartTop" height="160"></canvas>
            </div>
            <div class="tbl" id="topTable" style="margin-top:12px"></div>
          </div>
        </div>
      </section>

      <!-- TAVOLI -->
      <section id="sec-tables" class="card" style="display:none">
        <div class="row" style="flex-wrap:wrap">
          <h3 style="margin:0">Tavoli</h3>
          <div class="muted">Segna manualmente se un tavolo è libero o occupato.</div>
        </div>

        <div class="tbl" style="margin-top:10px">
          <table>
            <thead>
              <tr>
                <th>Tavolo</th>
                <th>Posti</th>
                <th>Stato</th>
                <th>Ultimo aggiornamento</th>
                <th>Azioni</th>
              </tr>
            </thead>
            <tbody id="tablesBody"></tbody>
          </table>
        </div>
      </section>
    </main>
  </div>
</div>

<script>
const supabase = window.supabase.createClient("<%= SUPABASE_URL %>", "<%= SUPABASE_KEY %>");
const $ = (s,root=document)=>root.querySelector(s);
const $$= (s,root=document)=>Array.from(root.querySelectorAll(s));
const euro = v => "€ " + Number(v||0).toFixed(2).replace(".", ",");

let TABLES_MAP = {}; // id/name -> status per bollini “Da incassare”

// ====== NAV ======
$$('[data-section]').forEach(a=>{
  a.addEventListener('click',e=>{
    e.preventDefault();
    $$('[data-section]').forEach(x=>x.classList.remove('active'));
    a.classList.add('active');
    const sec=a.dataset.section;
    $('#sec-orders').style.display = sec==='orders' ? 'block' : 'none';
    $('#sec-stats').style.display  = sec==='stats'  ? 'block' : 'none';
    $('#sec-tables').style.display = sec==='tables' ? 'block' : 'none';
    if(sec==='tables') loadTables();
  });
});

// ====== SETTINGS ======
async function loadSettings(){
  try{
    const r=await fetch('/api/settings');
    const j=await r.json();
    if(j.ok){
      $('#chk-sound').checked = !!j.sound_enabled || !!j.sound;
      $('#chk-autorefresh').checked = !!j.autorefresh;
    }
  }catch{}
}
async function saveSettings(){
  const payload = {
    sound_enabled: $('#chk-sound').checked,
    autorefresh: $('#chk-autorefresh').checked
  };
  await fetch('/api/settings',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
  setAutoRefresh();
}
$('#chk-sound').addEventListener('change', saveSettings);
$('#chk-autorefresh').addEventListener('change', saveSettings);

// ====== HELPER DATA (locale YYYY-MM-DD) ======
function isoLocalDateStr(dOrIso){
  const d = (dOrIso instanceof Date) ? dOrIso : new Date(dOrIso);
  const y=d.getFullYear(), m=String(d.getMonth()+1).padStart(2,'0'), dd=String(d.getDate()).padStart(2,'0');
  return `${y}-${m}-${dd}`;
}

// === ORA ITALIANA (anche con ora legale) ===
const ROME_TZ = 'Europe/Rome';
function formatRome(iso){
  return new Date(iso).toLocaleString('it-IT', { timeZone: ROME_TZ });
}
function ymdRome(iso){
  // ritorna 'YYYY-MM-DD' calcolato in fuso Italia
  const d = new Date(new Date(iso).toLocaleString('en-GB', { timeZone: ROME_TZ }));
  const y = d.getFullYear();
  const m = String(d.getMonth()+1).padStart(2,'0');
  const dd= String(d.getDate()).padStart(2,'0');
  return `${y}-${m}-${dd}`;
}

// ====== ORDINI ======
let STATUS='all', ORDERS=[], SUBS=false, refreshTimer=null;

async function counters(){
  try{
    const daySel = $('#dayOrders').value || isoLocalDateStr(new Date());
    const [pnd, cmp, cnc] = await Promise.all([
      fetch(`/api/orders?status=pending&day=${daySel}`).then(r=>r.json()),
      fetch(`/api/orders?status=completed&day=${daySel}`).then(r=>r.json()),
      fetch(`/api/orders?status=canceled&day=${daySel}`).then(r=>r.json())
    ]);
    const pend = (pnd.ok ? (pnd.orders||[]) : []);
    const comp = (cmp.ok ? (cmp.orders||[]) : []);
    const canc = (cnc.ok ? (cnc.orders||[]) : []);

    const nAll = pend.filter(o=>!o.ack).length + comp.length;
    const nDue = pend.filter(o=> o.ack).length;

    $('#c-all').textContent  = nAll;
    $('#c-due').textContent  = nDue;
    $('#c-paid').textContent = comp.length;
    $('#c-canc').textContent = canc.length;
  }catch(e){console.error(e);}
}

async function fetchOrders(){
  // carico anche i tavoli per i bollini
  try{
    const t=await fetch('/api/tables').then(r=>r.json());
    if(t.ok){
      TABLES_MAP = {};
      (t.tables||[]).forEach(tb=>{
        TABLES_MAP[(tb.name||('Tavolo '+tb.id))] = tb.status;
        TABLES_MAP[tb.id] = tb.status;
      });
    }
  }catch{}

  const q=$('#q').value.toLowerCase();
  const daySel = $('#dayOrders').value || isoLocalDateStr(new Date());

  let list = [];

  const [pnd, cmp, cnc] = await Promise.all([
    fetch(`/api/orders?status=pending&day=${daySel}`).then(r=>r.json()),
    fetch(`/api/orders?status=completed&day=${daySel}`).then(r=>r.json()),
    fetch(`/api/orders?status=canceled&day=${daySel}`).then(r=>r.json())
  ]);
  const pend = (pnd.ok ? (pnd.orders||[]) : []);
  const comp = (cmp.ok ? (cmp.orders||[]) : []);
  const canc = (cnc.ok ? (cnc.orders||[]) : []);

  if(STATUS==='all'){
    list = pend.filter(o=>!o.ack).concat(comp);
  }else if(STATUS==='due'){
    list = pend.filter(o=>o.ack);
  }else if(STATUS==='paid'){
    list = comp;
  }else if(STATUS==='canceled'){
    list = canc;
  }

  // ordina per data desc
  list.sort((a,b)=> (b.created_at||'').localeCompare(a.created_at||''));
  ORDERS=list;
  renderOrders(q);
  counters();
}

function badgeForDue(order){
  if(order.status==='completed') return '<span class="pill ok">pagato</span>';
  const key = order.table_code || ('Tavolo ?');
  const st  = TABLES_MAP[key];
  if(st==='occupied') return '<span class="pill warn">in attesa</span>';
  return '<span class="pill bad">non pagato</span>';
}

function renderOrders(q){
  const root=$('#orders'); root.innerHTML="";
  const filtered = q ? ORDERS.filter(o=>{
    const text=(o.table_code||"-")+" "+(o.items||[]).map(i=>i.name).join(" ");
    return text.toLowerCase().includes(q);
  }) : ORDERS;

  if(!filtered.length){ root.innerHTML='<div class="muted">Nessun ordine</div>'; return; }

  for(const o of filtered){
    const when = formatRome(o.created_at);
    const rows=(o.items||[]).map(it=>`
      <div class="row" style="padding:4px 0">
        <div>${it.qty}× ${it.name} <span class="muted">(€ ${Number(it.price).toFixed(2)})</span></div>
        <div><b>€ ${(Number(it.qty)*Number(it.price)).toFixed(2)}</b></div>
      </div>`).join("");

    const bell = (!o.ack && o.status==='pending')
      ? `<span class="bell new" data-act="ack" data-id="${o.id}" title="Nuovo">🔔</span>`
      : `<span class="bell" data-act="ack" data-id="${o.id}" title="Segna come letto">🔕</span>`;

    let actions = '';
    if(STATUS==='all'){
      if(o.status==='pending' && !o.ack){
        actions = `
          <button class="btn" data-act="print" data-id="${o.id}">🖨️ Stampa</button>
          <button class="btn danger" data-act="cancel" data-id="${o.id}">🗑️ Elimina</button>
          <button class="btn ok" data-act="mark_due" data-id="${o.id}">✅ Fatto</button>`;
      }else{
        actions = `<button class="btn" data-act="print" data-id="${o.id}">🖨️ Stampa</button>`;
      }
    }else if(STATUS==='due'){
      const badge = badgeForDue(o);
      actions = `
        ${badge}
        <button class="btn ok" data-act="complete" data-id="${o.id}">💶 Pagato in cassa</button>
        <button class="btn danger" data-act="cancel" data-id="${o.id}">🗑️ Elimina</button>`;
    }else if(STATUS==='paid'){
      actions = `<button class="btn" data-act="print" data-id="${o.id}">🖨️ Stampa</button>`;
    }else if(STATUS==='canceled'){
      actions = `<button class="btn" data-act="restore" data-id="${o.id}">↩️ Ripristina</button>`;
    }

    const el=document.createElement('div');
    el.className='order';
    el.innerHTML=`
      <div class="head">
        <div>
          <div class="muted">ID: ${o.id}</div>
          <div class="muted">Tavolo: <b>${o.table_code||'-'}</b></div>
          <div class="muted">Data: ${when}</div>
        </div>
        <div class="badge">${bell}<span class="pill">Totale: ${euro(o.total)}</span></div>
      </div>
      <div class="rows">${rows}</div>
      <div class="row" style="margin-top:8px">
        <div></div>
        <div style="display:flex;gap:8px;flex-wrap:wrap">${actions}</div>
      </div>`;
    root.appendChild(el);
  }
}

$('#orders').addEventListener('click', async ev=>{
  const b=ev.target.closest('[data-act]');
  if(!b) return;
  const id=b.dataset.id, act=b.dataset.act;
  if(act==='print'){ window.print(); await fetch(`/api/orders/${id}/printed`,{method:'POST'}); return; }
  if(act==='complete'){ await fetch(`/api/orders/${id}/complete`,{method:'POST'}); }
  if(act==='cancel'){ if(!confirm('Confermi eliminazione?')) return; await fetch(`/api/orders/${id}/cancel`,{method:'POST'}); }
  if(act==='restore'){ await fetch(`/api/orders/${id}/restore`,{method:'POST'}); }
  if(act==='ack'){ await fetch(`/api/orders/${id}/ack`,{method:'POST'}); }
  if(act==='mark_due'){
    await fetch(`/api/orders/${id}/ack`,{method:'POST'});
    STATUS='due';
    $$('.tab').forEach(x=>x.classList.remove('active'));
    $$('[data-status="due"]')[0]?.classList.add('active');
  }
  await fetchOrders();
});

// Cambio tab
$$('.tab').forEach(t=>{
  t.addEventListener('click', async ()=>{
    $$('.tab').forEach(x=>x.classList.remove('active'));
    t.classList.add('active');
    STATUS=t.dataset.status; // all | due | paid | canceled
    await fetchOrders();
  });
});

$('#btn-refresh').addEventListener('click', fetchOrders);
$('#q').addEventListener('input', ()=>renderOrders($('#q').value.toLowerCase()));
$('#clearQ').addEventListener('click', ()=>{ $('#q').value=''; renderOrders(''); });

// 🆕 Cambi data ⇒ ricarica lista + contatori
document.addEventListener('change', (e)=>{
  if(e.target && e.target.id==='dayOrders') fetchOrders();
});

// Auto-refresh
function setAutoRefresh(){
  if(refreshTimer) clearInterval(refreshTimer);
  if($('#chk-autorefresh').checked){
    refreshTimer = setInterval(fetchOrders, 8000);
  }
}

// Realtime ordini
function attachRealtime(){
  if(typeof supabase.channel!=="function" || SUBS) return; SUBS=true;
  supabase.channel("rt:orders")
    .on("postgres_changes",{event:"*",schema:"public",table:"orders"},async()=>{
      if($('#chk-sound').checked) beep();
      await fetchOrders();
    }).subscribe();

  supabase.channel("rt:order_items")
    .on("postgres_changes",{event:"*",schema:"public",table:"order_items"},async()=>{
      await fetchOrders();
    }).subscribe();
}
function beep(){
  try{
    const c=new (window.AudioContext||window.webkitAudioContext)();
    const o=c.createOscillator(),g=c.createGain();
    o.frequency.value=900;o.type="triangle";
    o.connect(g);g.connect(c.destination);
    g.gain.setValueAtTime(.001,c.currentTime);
    g.gain.exponentialRampToValueAtTime(.2,c.currentTime+.01);
    o.start();o.stop(c.currentTime+.14);
  }catch{}
}

// ====== STATISTICHE ======
let chartHour=null, chartTop=null;
function setKPI(cnt,rev){ $('#k-count').textContent=cnt; $('#k-rev').textContent=euro(rev); $('#k-avg').textContent=euro(cnt?rev/cnt:0); }

async function loadDay(){
  const d=$('#day').value || new Date().toISOString().slice(0,10);
  const r=await fetch(`/api/stats/day?date=${d}`);
  const j=await r.json();
  if(!j.ok) return;
  setKPI(j.count, j.total);
  const labels=j.perBucket.rows.map(b=>new Date(b.bucket).getHours());
  const data=j.perBucket.rows.map(b=>b.revenue);
  if(chartHour) chartHour.destroy();
  chartHour=new Chart($('#chartHour'),{type:'bar',data:{labels,datasets:[{label:'Incasso €/ora',data}]},options:{plugins:{legend:{display:false}},scales:{y:{ticks:{callback:v=>'€ '+v}}}}});
}

async function loadRange(){
  const f=$('#from').value,t=$('#to').value;
  if(!f||!t) return;
  const r=await fetch(`/api/stats/range?from=${f}&to=${t}`);
  const j=await r.json();
  if(!j.ok) return;
  const top=j.top.list.slice(0,5);
  const labels=top.map(x=>x.name), data=top.map(x=>x.qty);
  if(chartTop) chartTop.destroy();
  chartTop=new Chart($('#chartTop'),{type:'doughnut',data:{labels,datasets:[{data}]},options:{plugins:{legend:{position:'bottom'}}}});
  $('#topTable').innerHTML=`<table><thead><tr><th>Prodotto</th><th>Qtà</th><th>Fatturato</th><th>% Qtà</th><th>% Fatt.</th></tr></thead><tbody>${
    j.top.list.map(x=>`<tr><td>${x.name}</td><td>${x.qty}</td><td>${euro(x.revenue)}</td><td>${x.pctQty.toFixed(1)}%</td><td>${x.pctRev.toFixed(1)}%</td></tr>`).join('')
  }</tbody></table>`;
}

// ====== TAVOLI ======
async function loadTables(){
  try{
    const r=await fetch('/api/tables');
    const j=await r.json();
    if(!j.ok) return;
    const tbody=$('#tablesBody');
    tbody.innerHTML='';
    j.tables.forEach(t=>{
      const state = t.status==='reserved' ? '🟡 Prenotato' : (t.status==='occupied' ? '🔴 Occupato' : '🟢 Libero');
      const tr=document.createElement('tr');
      tr.innerHTML=`
        <td>${t.name||'Tavolo '+t.id}</td>
        <td>${t.seats??'-'}</td>
        <td>${state}</td>
        <td>${t.updated_at?new Date(t.updated_at).toLocaleString():'-'}</td>
        <td>
          <button class="btn ok" onclick="setTable(${t.id},'free')">Libera</button>
          <button class="btn danger" onclick="setTable(${t.id},'seat')">Siede</button>
        </td>`;
      tbody.appendChild(tr);
    });

    // aggiorna cache anche per i bollini
    TABLES_MAP = {};
    (j.tables||[]).forEach(tb=>{
      TABLES_MAP[(tb.name||('Tavolo '+tb.id))] = tb.status;
      TABLES_MAP[tb.id] = tb.status;
    });
  }catch(e){console.error("Errore tavoli:",e);}
}

async function setTable(id,action){
  try{
    await fetch(`/api/tables/${id}/${action}`,{method:'POST'});
    await loadTables();
    await fetchOrders();
  }catch(e){console.error(e);}
}

function attachRealtimeTables(){
  if(typeof supabase.channel!=="function") return;
  supabase.channel("rt:restaurant_tables")
    .on("postgres_changes",{event:"*",schema:"public",table:"restaurant_tables"},async()=>{
      await loadTables();
      await fetchOrders();
    }).subscribe();
}

// ====== BOOT ======
(async()=>{
  const today=new Date();
  // stats defaults
  $('#day').value=isoLocalDateStr(today);
  const from=new Date(); from.setDate(today.getDate()-6);
  $('#from').value=isoLocalDateStr(from);
  $('#to').value=isoLocalDateStr(today);
  // 🆕 ordini default: oggi
  $('#dayOrders').value = isoLocalDateStr(today);

  await loadSettings();
  await fetchOrders();
  await loadDay();
  await loadRange();
  attachRealtime();
  attachRealtimeTables();
  setAutoRefresh();
})();
$('#btn-day').addEventListener('click',loadDay);
$('#btn-range').addEventListener('click',loadRange);
</script>
</body>
</html>