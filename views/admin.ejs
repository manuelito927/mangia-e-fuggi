<!DOCTYPE html>
<html lang="it">
<head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Mangia & Fuggi — Dashboard</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet"/>
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<style>
:root{--bg:#f6efe7;--panel:#fff;--ink:#2c2623;--muted:#7b6d66;--brand:#7a4a3b;--ring:#ead8cf;--ok:#1f8f4e;--warn:#b42318}
*{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--ink);font-family:Inter,system-ui}
.wrap{max-width:1200px;margin:0 auto;padding:16px}
h1{margin:0 0 10px;font-weight:800;letter-spacing:.3px}
.layout{display:grid;grid-template-columns:230px 1fr;gap:16px}
@media (max-width:900px){.layout{grid-template-columns:1fr}}
.side{background:var(--panel);border:1px solid var(--ring);border-radius:16px;padding:14px;height:fit-content;position:sticky;top:12px}
.nav .item{display:block;padding:10px 12px;border:1px solid #eee;border-radius:10px;margin-bottom:8px;color:inherit;text-decoration:none}
.nav .item.active{background:var(--brand);color:#fff;border-color:var(--brand)}
.card{background:var(--panel);border:1px solid var(--ring);border-radius:16px;padding:14px;margin-bottom:16px}
.row{display:flex;gap:10px;justify-content:space-between;align-items:center}
.muted{color:var(--muted)} .pill{background:#f3e7e2;color:var(--brand);border-radius:999px;padding:6px 10px;font-weight:700}
.btn{border:1px solid var(--ring);background:#fff;padding:8px 12px;border-radius:10px;cursor:pointer}
.btn.brand{background:var(--brand);border-color:var(--brand);color:#fff}
.btn.ok{background:#e8f6ee;border-color:#cde8d5;color:var(--ok)}
.btn.danger{background:#fdeaea;border-color:#f3caca;color:var(--warn)}
.input{border:1px solid var(--ring);border-radius:10px;padding:8px 10px;background:#fff}
.order{border:1px solid var(--ring);border-radius:14px;padding:12px;margin-bottom:12px;background:#fff}
.order .head{display:flex;gap:10px;justify-content:space-between;align-items:center;margin-bottom:8px}
.order .rows{margin-top:6px;border-top:1px dashed var(--ring);padding-top:6px}
.grid2{display:grid;grid-template-columns:1fr 1fr;gap:16px}
@media (max-width:900px){.grid2{grid-template-columns:1fr}}
.tbl table{width:100%;border-collapse:collapse;font-size:14px}
.tbl th,.tbl td{padding:8px;border-bottom:1px solid #eee;text-align:left}
.badge{display:inline-flex;align-items:center;gap:6px}
.bell{font-size:18px; cursor:pointer}
.bell.new{color:#d97706}
.clearx{margin-left:6px; cursor:pointer; color:#555}
.kg{display:flex;gap:8px;flex-wrap:wrap}
.kg .k{background:#fff;border:1px solid var(--ring);padding:8px 10px;border-radius:10px}
.tab.active{background:#f1d9d1}
</style>
</head>
<body>
<div class="wrap">
  <h1>Mangia & Fuggi — Dashboard</h1>
  <div class="layout">
    <!-- Sidebar -->
    <aside class="side">
      <div class="nav">
        <a href="#" class="item active" data-section="orders">📋 Ordini</a>
        <a href="#" class="item" data-section="stats">📊 Statistiche</a>
        <!-- 👇 AGGIUNTA: voce Tavoli -->
        <a href="#" class="item" data-section="tables">🪑 Tavoli</a>
      </div>
      <div class="card">
        <label style="display:flex;gap:8px;align-items:center;margin-bottom:8px">
          <input type="checkbox" id="chk-sound"/> Suono nuovi ordini
        </label>
        <label style="display:flex;gap:8px;align-items:center">
          <input type="checkbox" id="chk-autorefresh"/> Auto-aggiorna
        </label>
      </div>
    </aside>

    <!-- Main -->
    <main>
      <!-- ORDERS -->
      <section id="sec-orders" class="card">
        <div class="row" style="flex-wrap:wrap">
          <div class="kg">
            <span class="muted">Stato:</span>
            <button class="btn tab active" data-status="pending">Pendenti <span id="c-pend" class="pill" style="padding:2px 8px"></span></button>
            <button class="btn tab" data-status="completed">Completati <span id="c-comp" class="pill" style="padding:2px 8px"></span></button>
            <button class="btn tab" data-status="canceled">Eliminati <span id="c-canc" class="pill" style="padding:2px 8px"></span></button>
          </div>
          <div style="display:flex;gap:8px;align-items:center">
            <input id="q" class="input" placeholder="Cerca tavolo o piatto…" />
            <span id="clearQ" class="clearx">Elimina</span>
            <button id="btn-refresh" class="btn brand">Aggiorna</button>
          </div>
        </div>
        <div id="orders"></div>
      </section>

      <!-- STATS -->
      <section id="sec-stats" class="card" style="display:none">
        <div class="grid2">
          <div class="card">
            <h3 style="margin:0 0 8px 0">Giorno</h3>
            <div class="row" style="gap:8px">
              <input id="day" type="date" class="input" />
              <button id="btn-day" class="btn brand">Aggiorna</button>
            </div>
            <div id="kpis" class="kg" style="margin-top:10px">
              <div class="k">Ordini: <b id="k-count">0</b></div>
              <div class="k">Incasso: <b id="k-rev">€ 0,00</b></div>
              <div class="k">Scontrino medio: <b id="k-avg">€ 0,00</b></div>
            </div>
            <div class="card" style="margin-top:12px">
              <canvas id="chartHour" height="160"></canvas>
            </div>
          </div>
          <div class="card">
            <h3 style="margin:0 0 8px 0">Intervallo</h3>
            <div class="row" style="gap:8px">
              <input id="from" type="date" class="input" />
              <input id="to"   type="date" class="input" />
              <button id="btn-range" class="btn brand">Aggiorna</button>
            </div>
            <div class="card" style="margin-top:12px">
              <canvas id="chartTop" height="160"></canvas>
            </div>
            <div class="tbl" id="topTable" style="margin-top:12px"></div>
          </div>
        </div>
      </section>

      <!-- 👇 AGGIUNTA: sezione TAVOLI -->
      <section id="sec-tables" class="card" style="display:none">
        <div class="row" style="flex-wrap:wrap">
          <h3 style="margin:0">Tavoli</h3>
          <div class="muted">Segna manualmente se un tavolo è libero o occupato.</div>
        </div>

        <div class="tbl" style="margin-top:10px">
          <table>
            <thead>
              <tr>
                <th>Tavolo</th>
                <th>Posti</th>
                <th>Stato</th>
                <th>Ultimo aggiornamento</th>
                <th>Azioni</th>
              </tr>
            </thead>
            <tbody id="tablesBody"></tbody>
          </table>
        </div>
      </section>
      <!-- 🔼 FINE AGGIUNTA -->
    </main>
  </div>
</div>

<script>
const supabase = window.supabase.createClient("<%= SUPABASE_URL %>", "<%= SUPABASE_KEY %>");
const $ = (s,root=document)=>root.querySelector(s);
const $$= (s,root=document)=>Array.from(root.querySelectorAll(s));
const euro = v => "€ " + Number(v||0).toFixed(2).replace(".", ",");

// ===== NAV =====
$$('[data-section]').forEach(a=>{
  a.addEventListener('click',e=>{
    e.preventDefault();
    $$('[data-section]').forEach(x=>x.classList.remove('active'));
    a.classList.add('active');
    const sec=a.dataset.section;
    $('#sec-orders').style.display = sec==='orders'?'block':'none';
    $('#sec-stats').style.display  = sec==='stats' ?'block':'none';
  });
});

// ===== SETTINGS (suono / auto-refresh) =====
async function loadSettings(){
  try{
    const r=await fetch('/api/settings');
    const j=await r.json();
    if(j.ok){
      $('#chk-sound').checked = !!j.sound_enabled || !!j.sound;
      $('#chk-autorefresh').checked = !!j.autorefresh;
    }
  }catch{}
}
async function saveSettings(){
  const payload = {
    sound_enabled: $('#chk-sound').checked,
    autorefresh: $('#chk-autorefresh').checked
  };
  await fetch('/api/settings',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
}
$('#chk-sound').addEventListener('change', saveSettings);
$('#chk-autorefresh').addEventListener('change', saveSettings);

// ===== ORDERS =====
let STATUS='pending', ORDERS=[], SUBS=false, TMR=null;

async function counters(){
  // carica conteggi rapidi per i tab
  try{
    const a = await fetch('/api/orders?status=pending').then(r=>r.json());
    const b = await fetch('/api/orders?status=completed').then(r=>r.json());
    const c = await fetch('/api/orders?status=canceled').then(r=>r.json());
    $('#c-pend').textContent = a.ok ? a.orders.length : 0;
    $('#c-comp').textContent = b.ok ? b.orders.length : 0;
    $('#c-canc').textContent = c.ok ? c.orders.length : 0;
  }catch{}
}

async function fetchOrders(){
  const q=$('#q').value.toLowerCase();
  const r=await fetch(`/api/orders?status=${STATUS}`); const j=await r.json(); if(!j.ok) return;
  ORDERS=j.orders||[];
  renderOrders(q);
  counters();
}
function renderOrders(q){
  const root=$('#orders'); root.innerHTML="";
  const list = q ? ORDERS.filter(o=>{
    const text=(o.table_code||"-")+" "+(o.items||[]).map(i=>i.name).join(" ");
    return text.toLowerCase().includes(q);
  }) : ORDERS;

  if(!list.length){ root.innerHTML='<div class="muted">Nessun ordine</div>'; return; }

  for(const o of list){
    const when=new Date(o.created_at).toLocaleString();
    const rows=(o.items||[]).map(it=>`
      <div class="row" style="padding:4px 0">
        <div>${it.qty}× ${it.name} <span class="muted">(€ ${Number(it.price).toFixed(2)})</span></div>
        <div><b>€ ${(Number(it.qty)*Number(it.price)).toFixed(2)}</b></div>
      </div>
    `).join("");
    const bell = (!o.ack && o.status==='pending') ? `<span class="bell new" title="Nuovo" data-act="ack" data-id="${o.id}">🔔</span>` : `<span class="bell" data-act="ack" data-id="${o.id}" title="Segna come letto">🔕</span>`;

    const el=document.createElement('div'); el.className='order';
    el.setAttribute('data-order', o.id);
    el.innerHTML=`
      <div class="head">
        <div>
          <div class="muted">ID: ${o.id}</div>
          <div class="muted">Tavolo: <b>${o.table_code||'-'}</b></div>
          <div class="muted">Data: ${when}</div>
        </div>
        <div class="badge">
          ${bell}
          <span class="pill">Totale: ${euro(o.total)}</span>
        </div>
      </div>
      <div class="rows">${rows}</div>
      <div class="row" style="margin-top:8px">
        <div></div>
        <div style="display:flex;gap:8px">
          <button class="btn" data-act="print" data-id="${o.id}">🖨️ Stampa</button>
          ${STATUS==='pending' ? `
            <button class="btn ok"     data-act="complete" data-id="${o.id}">✅ Completa</button>
            <button class="btn danger" data-act="cancel"   data-id="${o.id}">🗑️ Elimina</button>
          ` : `
            <button class="btn" data-act="restore" data-id="${o.id}">↩️ Ripristina</button>
          `}
        </div>
      </div>
    `;
    root.appendChild(el);
  }
}
$('#orders').addEventListener('click', async (ev)=>{
  const b=ev.target.closest('button[data-act],span[data-act]'); if(!b) return;
  const id=b.dataset.id, act=b.dataset.act;
  if(act==='print'){ window.print(); await fetch(`/api/orders/${id}/printed`,{method:'POST'}); return; }
  if(act==='complete'){ await fetch(`/api/orders/${id}/complete`,{method:'POST'}); }
  if(act==='cancel'){ if(!confirm('Confermi eliminazione?')) return; await fetch(`/api/orders/${id}/cancel`,{method:'POST'}); }
  if(act==='restore'){ await fetch(`/api/orders/${id}/restore`,{method:'POST'}); }
  if(act==='ack'){ await fetch(`/api/orders/${id}/ack`,{method:'POST'}); }
  await fetchOrders();
  if($('#sec-stats').style.display!=='none'){ await loadDay(); await loadRange(); }
});
$$('.tab').forEach(t=>{
  t.addEventListener('click',async ()=>{
    $$('.tab').forEach(x=>x.classList.remove('active'));
    t.classList.add('active');
    STATUS=t.dataset.status;
    await fetchOrders();
  });
});
$('#btn-refresh').addEventListener('click', fetchOrders);
$('#q').addEventListener('input', ()=>renderOrders($('#q').value.toLowerCase()));
$('#clearQ').addEventListener('click', ()=>{ $('#q').value=''; renderOrders(''); });

// Auto-refresh (se attivo in impostazioni)
function setAutoRefresh(){
  if(TMR) clearInterval(TMR);
  if($('#chk-autorefresh').checked){
    TMR = setInterval(fetchOrders, 8000);
  }
}
$('#chk-autorefresh').addEventListener('change', setAutoRefresh);

// Realtime: ricarica sia ordini che stats
function attachRealtime(){
  if(typeof supabase.channel !== 'function' || SUBS) return; SUBS=true;
  supabase.channel("rt:orders")
    .on("postgres_changes", { event: "*", schema: "public", table: "orders" }, async () => {
      if($('#chk-sound').checked) beep();
      await fetchOrders();
      if($('#sec-stats').style.display!=='none'){ await loadDay(); await loadRange(); }
    })
    .subscribe();
  supabase.channel("rt:order_items")
    .on("postgres_changes", { event: "*", schema: "public", table: "order_items" }, async () => {
      await fetchOrders();
      if($('#sec-stats').style.display!=='none'){ await loadDay(); await loadRange(); }
    })
    .subscribe();
}
function beep(){ try{ const c=new (window.AudioContext||window.webkitAudioContext)(); const o=c.createOscillator(), g=c.createGain(); o.frequency.value=900;o.type="triangle"; o.connect(g);g.connect(c.destination); g.gain.setValueAtTime(.001,c.currentTime);g.gain.exponentialRampToValueAtTime(.2,c.currentTime+.01); o.start(); o.stop(c.currentTime+.14);}catch(e){} }

// ===== STATS =====
let chartHour=null, chartTop=null;
function setKPI(cnt,rev){ $('#k-count').textContent=cnt; $('#k-rev').textContent=euro(rev); $('#k-avg').textContent=euro(cnt?rev/cnt:0); }

async function loadDay(){
  const d=$('#day').value || new Date().toISOString().slice(0,10);
  const r=await fetch(`/api/stats/day?date=${d}`); const j=await r.json(); if(!j.ok) return;
  setKPI(j.count, j.total);
  const labels=j.perBucket.rows.map(b=> new Date(b.bucket).toLocaleTimeString([], {hour:'2-digit'}));
  const data  =j.perBucket.rows.map(b=> b.revenue);
  if(chartHour) chartHour.destroy();
  chartHour=new Chart($('#chartHour'), { type:'bar', data:{ labels, datasets:[{ label:'Incasso €/ora', data }] }, options:{ plugins:{legend:{display:false}}, scales:{ y:{ ticks:{ callback:v=>'€ '+v }}}}});
}
async function loadRange(){
  const f=$('#from').value, t=$('#to').value; if(!f||!t) return;
  const r=await fetch(`/api/stats/range?from=${f}&to=${t}`); const j=await r.json(); if(!j.ok) return;
  const top=j.top.list.slice(0,5);
  const labels=top.map(x=>x.name), data=top.map(x=>x.qty);
  if(chartTop) chartTop.destroy();
  chartTop=new Chart($('#chartTop'), { type:'doughnut', data:{ labels, datasets:[{ data }] }, options:{ plugins:{legend:{position:'bottom'}} }});
  $('#topTable').innerHTML = `
    <div class="tbl">
      <table>
        <thead><tr><th>Prodotto</th><th>Qtà</th><th>Fatturato</th><th>% Qtà</th><th>% Fatt.</th></tr></thead>
        <tbody>
          ${j.top.list.map(x=>`<tr><td>${x.name}</td><td>${x.qty}</td><td>${euro(x.revenue)}</td><td>${x.pctQty.toFixed(1)}%</td><td>${x.pctRev.toFixed(1)}%</td></tr>`).join('')}
        </tbody>
      </table>
    </div>`;
}

// ===== BOOT =====
(async ()=>{
  const today=new Date(); $('#day').value=today.toISOString().slice(0,10);
  const from=new Date(); from.setDate(today.getDate()-6);
  $('#from').value=from.toISOString().slice(0,10);
  $('#to').value=today.toISOString().slice(0,10);

  await loadSettings();
  await fetchOrders();
  await loadDay();
  await loadRange();
  attachRealtime();
  setAutoRefresh();
})();
$('#btn-day').addEventListener('click', loadDay);
$('#btn-range').addEventListener('click', loadRange);

/* ===================== AGGIUNTE: gestione Tavoli ===================== */

/* 1) Click sulla voce "Tavoli" (non tocco il tuo handler esistente) */
const linkTables = document.querySelector('.nav .item[data-section="tables"]');
if (linkTables) {
  linkTables.addEventListener('click', (e)=>{
    e.preventDefault();
    // attiva il tab cliccato
    $$('[data-section]').forEach(x=>x.classList.remove('active'));
    linkTables.classList.add('active');
    // mostra solo la sezione tavoli
    const orders = document.getElementById('sec-orders');
    const stats  = document.getElementById('sec-stats');
    const tables = document.getElementById('sec-tables');
    if (orders) orders.style.display='none';
    if (stats)  stats.style.display='none';
    if (tables) tables.style.display='block';
    // carica dati
    loadTables();
  });
}

/* 2) Funzioni per caricare e aggiornare tavoli (usa le API del server) */
async function loadTables() {
  try{
    const r = await fetch('/api/tables');
    const j = await r.json();
    if(!j.ok) return;

    const tbody = document.getElementById('tablesBody');
    if (!tbody) return;
    tbody.innerHTML = '';

    j.tables.forEach(t => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${t.table_code}</td>
        <td>${t.seats ?? '-'}</td>
        <td>${t.is_free ? '🟢 Libero' : '🔴 Occupato'}</td>
        <td>${t.updated_at ? new Date(t.updated_at).toLocaleString() : '-'}</td>
        <td>
          <button class="btn ok"     onclick="updateTable('${t.table_code}', true)">Libera</button>
          <button class="btn danger" onclick="updateTable('${t.table_code}', false)">Siede</button>
        </td>
      `;
      tbody.appendChild(tr);
    });
  }catch(e){ console.error(e); }
}

async function updateTable(code, free){
  try{
    await fetch('/api/tables/update', {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ table_code: code, is_free: free })
    });
    loadTables();
  }catch(e){ console.error(e); }
}

/* 3) Realtime per tavoli (se disponibile in Supabase) */
function attachRealtimeTables(){
  try{
    if(typeof supabase.channel !== 'function') return;
    supabase.channel("rt:tables")
      .on("postgres_changes", { event: "*", schema: "public", table: "tables" }, async () => {
        await loadTables();
      })
      .subscribe();
  }catch(e){ console.error(e); }
}

/* 4) Boot aggiuntivo per tavoli (non tocco il tuo boot esistente) */
(async ()=>{
  await loadTables();          // carica all’avvio (non fa nulla se la sezione è nascosta)
  attachRealtimeTables();      // attiva realtime tavoli
})();
</script>
</body>
</html>